spring.application.name = produit-service

spring.output.ansi.enabled = always

logging.level.fr.formation = DEBUG

server.port = 8081

spring.datasource.url = jdbc:postgresql://localhost:5432/services
spring.datasource.username = postgres
spring.datasource.password = Not24Get

spring.jpa.generate-ddl = true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Client Eureka
eureka.client.service-url.defaultZone = http://localhost:9000/eureka/

# Configuration CircuitBreaker
resilience4j.circuitbreaker.configs.default.failure-rate-threshold = 50
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls = 3
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state = 10
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state = 5s
resilience4j.circuitbreaker.configs.default.sliding-window-size = 5
resilience4j.circuitbreaker.configs.default.sliding-window-type = count-based
resilience4j.circuitbreaker.configs.default.slow-call-duration-threshold = 1s
resilience4j.circuitbreaker.configs.default.slow-call-rate-threshold = 50
resilience4j.circuitbreaker.configs.default.record-exceptions = java.util.concurrent.TimeoutException

spring.cloud.openfeign.circuitbreaker.enabled = true
spring.cloud.openfeign.circuitbreaker.alphanumeric-ids.enabled = true

# Configuration Bulkhead
resilience4j.bulkhead.instances.produitsService.max-wait-duration = 1
resilience4j.bulkhead.instances.produitsService.max-concurrent-calls = 10

resilience4j.thread-pool-bulkhead.instances.produitsService.max-thread-pool-size = 10
resilience4j.thread-pool-bulkhead.instances.produitsService.core-thread-pool-size = 10
resilience4j.thread-pool-bulkhead.instances.produitsService.queue-capacity = 5

# Configuration RabbitMQ
spring.rabbitmq.host = rabbit
spring.rabbitmq.port = 5672
spring.rabbitmq.username = guest
spring.rabbitmq.password = guest

spring.cloud.stream.bindings.onCommentaireCreated-in-0.destination = commentaire
spring.cloud.stream.bindings.onCommentaireCreated-in-0.group = produit-service
spring.cloud.stream.rabbit.bindings.onCommentaireCreated-in-0.consumer.binding-routing-key = commentaire.create

spring.cloud.stream.bindings.onCommentaireCreated-out-0.destination = commentaire
spring.cloud.stream.rabbit.bindings.onCommentaireCreated-out-0.producer.routing-key-expression = 'commentaire.validate'

spring.cloud.stream.bindings.onCommentaireCreated-out-1.destination = commentaire
spring.cloud.stream.rabbit.bindings.onCommentaireCreated-out-1.producer.routing-key-expression = 'commentaire.reject'
